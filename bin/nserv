#!/usr/bin/env node

// modules
var commander = require('commander'),
    fs = require('fs'),
    sys = require("sys"),
    exec  = require('child_process').exec,
    forever  = require('forever'),
    http = require('http'),
    colors = require('colors'),
    path = require('path');
    
// vars
var choice = process.argv[2];
    
// vars
var base = path.resolve(__dirname + '/../') + '/',
    placeholders = base + 'placeholders/',
    nservDir = process.env.HOME + '/.nserv/';

// choices
switch(choice){
  case 'start': start(); break;
  case 'stop': stop(); break;
  case 'create': create(); break;
  case 'remove': remove(); break;
  case 'list': list(); break;
  case 'help': help(); break;
  default: sendError("Please provide a valid parameter. eg. 'create', 'remove', 'list', 'help', [sudo] 'start', [sudo] 'stop'"); break
}

function start(){
  fs.stat(nservDir + 'domains.json', function(err, data){
    if(err){
      fs.mkdir(nservDir, '0777', function(err){
        if (err) throw err;
        fs.readFile(placeholders + 'domains.json', function (err, data) {
          if (err) throw err;
          fs.writeFile(nservDir + 'domains.json', data, function (err) {
            if (err) throw err;
            fs.chmodSync(nservDir + 'domains.json', '0777');
            testSudo(function(err){
              if(err){
                sendError("Are you sure you are running with sudo permissions?", err);
              }
              startServer();
            }); 
          });
        });
      });
    }
    else {
      testSudo(function(err){
        if(err){
          sendError("Are you sure you are running with sudo permissions?", err);
        }
        startServer();
      });
    }
  });
}

function stop(){
  testSudo(function(err){
    if(err){
      sendError("Are you sure you are running with sudo permissions?", err);
    }
    stopServer();
  });
}

function startServer(){
  exec('forever start ' + base + 'lib/www.js', function(err, stdout, stderr){
    if(err){
      sendError("Could not start nserv server.", err);
    }
    else {
      sendOutput('Nserv started on port 80.')
    }
  });
}

function stopServer(){
  exec('forever stop ' + base + 'lib/www.js', function(err, stdout, stderr){
    if(err){
      sendError("Could not stop nserv server.", err);
    }
    else {
      sendOutput('Nserv server stopped.')
    }
  });  
}

function testSudo(cb){
  var test = http.createServer(function (req, res) {
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end('Hello World\n');
  });
  try {
    test.listen('79', function(){
      test.close();
      cb(null);
    });
  }
  catch(err) {
    cb(err)
    process.exit();
  }
}

function create(){
  if(typeof process.argv[3] === 'undefined') {
    sendError("You must provide a domain name when running create.", null);
  }
  var domain = process.argv[3];
  getApps(function(apps){
    checkForExisting(domain, apps, function(loc){
      if(loc){
        sendError("Application already exists.");
      }
      else {
        addApp(domain, function(){
          sendOutput("Domain successfully added.\nAdd a git remote to make changes:\n".green + "> git remote add nserv ssh://".grey + "<HOSTNAME>".red + "/~/nserv/www/".grey + domain.grey + "/.git".grey);
        });       
      };
    });
  }); 
}

function remove() {
  if(typeof process.argv[3] === 'undefined') {
    sendError("You must provide a domain name when running delete.", null);
  }
  var domain = process.argv[3];
  getApps(function(apps){
    checkForExisting(domain, apps, function(loc){
      if(loc){
        deleteApp(domain, loc, function(){
          sendOutput("Application deleted");
        });
      }
      else {
        sendError("That application is not currently installed.", null);
      }       
    });
  }); 
}

function list(){
  getApps(function(apps){
    if(Object.keys(apps).length > 0){
      var domainList = "";
      for (app in apps) {
        domainList += app.green + " - git remote add nserv ssh://".grey + "<HOSTNAME>".red + apps[app].loc.grey + "/".grey + ".git".grey + '\n';  
      };      
    }
    else {
      domainList = "No applications installed.\n";
    }
    sendOutput("Installed applications/domains.\n".magenta + domainList.slice(0, -1).cyan);
  }); 
}

function help() {
  var message = "" + 
    "Options: \n".magenta +
    "  [sudo] start \n".cyan +
    "  [sudo] stop \n".cyan +
    "  remove (domain) \n".cyan +
    "  create (domain) \n".cyan +
    "  remove (domain) \n".cyan +
    "  list \n".cyan +
    "  help ".cyan;
    
  sendOutput(message);  
}

function addApp(domain, callback){
  var appBase = domain + '/',
      appRepo = appBase + ".git/",
      fullPath = process.cwd() + '/' + domain;
  
  getPort(function(port){
    fs.mkdir(appBase, '755', function(err){
      if(err){
        sendError("Could not make base application directory.", err);
      }
      fs.mkdir(appRepo, '755', function(err){
        if(err){
          sendError("Could not make git repo directory.", err);
        }
        exec("cd " + appRepo + " && exec git init --bare", function(err, stdout, stderr){
          if(err){
            sendError("Could create application git repo.", err);
          }
          fs.readFile(placeholders + 'post-receive', function(err, data){
            if(err){
              sendError("Could not read post-receive hook.", err);
            }
            fs.writeFile(appRepo + 'hooks/post-receive', data, function(){
              if(err){
                sendError("Could not write post-receive hook.", err);
              }
              fs.chmod(appRepo + 'hooks/post-receive', '755', function(err){
                if(err){
                  sendError("Could change file permissions for post-receive hook.", err);
                }
                fs.link(placeholders + 'helloworld.js', appBase + 'server.js' , function(err){
                  if(err){
                    sendError("Could not create placeholder application.", err);
                  }
                  fs.readFile(nservDir + 'domains.json', function (err, data) {
                    if(err){
                      sendError("Could not read proxy table.", err);
                    }
                    var config = JSON.parse(data);
                    config[domain] = {
                      port: port,
                      loc: fullPath
                    }                   
                    newConfig = JSON.stringify(config);
                    exec('PORT=' + port + ' forever start ' + fullPath + '/server.js', function(err){
                      if(err){
                        sendError("Could not start application.", err);
                      }
                      fs.writeFile(nservDir + 'domains.json', newConfig, function (err) {
                        if(err){
                          sendError("Could not write proxy table.", err);
                        }
                        callback();
                      });                 
                    });
                  });
                });
              });   
            });
          });
        });
      });
    });
  });
}

function deleteApp (domain, loc, callback) {
  console.log('----------------------------------------'.grey);
  commander.confirm('Are you sure you want to delete this domain? (y/n):'.magenta + " ", function(ok){
    process.stdin.destroy(); // needed to kill commander process
    if(ok === true) {
      exec("rm -r " + loc, function (err) {
        if(err){
          sendError("Could not remove application directory.", err);
        }
        fs.readFile(nservDir + 'domains.json', function (err, data) {
          if(err){
            sendError("Could read proxy table.", err);
          }
          var config = JSON.parse(data);
          delete config[domain];
          var newConfig = JSON.stringify(config);
          fs.writeFile(nservDir + 'domains.json', newConfig, function (err) {
            if(err){
              sendError("Could write proxy table.", err);
            }
            exec("forever stop " + loc + "/server.js", function(err){
              if(err){
                sendError("Could not write proxy table.", err);
              }
              callback();
            });               
          });
        });
      });
    }
    else {
      sendOutput("Domain not deleted.");
    }
  });
}

function getApps(callback){
  var apps = new Array();
  fs.readFile(nservDir + 'domains.json', function(err, data){
    var apps = JSON.parse(data);
    callback(apps);
  });
}

function checkForExisting(domain, apps, callback) {
  for (app in apps) {
    if(app == domain){
    	var loc = apps[app].loc;
    	return callback(loc);
    }
  }
  callback(false);
}

function getPort(callback){
  var port = Math.floor(Math.random() * 1001 + 9000);
  exec("netstat -tulpn | grep 0.0.0.0:" + port, function(err, stdout, stderr){
    if(stdout == ""){
      return callback(port);
    }
    getPort(callback);
  });
}

String.prototype.trim = function () {
    return this.replace(/^\s*/, "").replace(/\s*$/, "");
}

function sendOutput(message){
  console.log('----------------------------------------'.grey);
  console.log(message.green);
  console.log('----------------------------------------'.grey);
}

function sendError(message, err){
  console.log('----------------------------------------'.red);
  console.log(message.red);
  if(err) {
    console.log(err);
  }
  console.log('----------------------------------------'.red);
  process.exit();
}